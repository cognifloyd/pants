# Copyright 2023 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import annotations

from dataclasses import dataclass
from typing import TypedDict

import yaml

from pants.backend.nfpm.field_sets import NfpmPackageFieldSet
from pants.core.goals.package import TransitiveTargetsWithoutTraversingPackagesRequest
from pants.engine.fs import CreateDigest, FileContent
from pants.engine.internals.native_engine import Digest
from pants.engine.rules import Get, collect_rules, rule
from pants.engine.target import Target, TransitiveTargets
from pants.util.logging import LogLevel


@dataclass(frozen=True)
class RequestNfpmPackageConfig:
    field_set: NfpmPackageFieldSet


@dataclass(frozen=True)
class NfpmPackageConfig:
    digest: Digest  # digest contains nfpm.yaml


class NfpmFileInfo(TypedDict, total=False):
    # nFPM allows these to be None or missing.
    # Each of the fields have a default, so in practice, these won't be None.
    owner: str | None
    group: str | None
    mode: int | None
    mtime: str | None


class NfpmContent(TypedDict, total=False):
    src: str
    dst: str
    type: str
    packager: str
    file_info: NfpmFileInfo


@rule(level=LogLevel.DEBUG)
async def generate_nfpm_yaml(request: RequestNfpmPackageConfig) -> NfpmPackageConfig:
    transitive_targets = await Get(
        TransitiveTargets,
        TransitiveTargetsWithoutTraversingPackagesRequest([request.field_set.address]),
    )

    # Fist get the config that can be constructed from the target itself.
    nfpm_package_target = transitive_targets.roots[0]
    config = request.field_set.nfpm_config(nfpm_package_target)

    # Second, gather package contents from hydrated deps.
    contents: list[NfpmContent] = config["contents"]
    contents.sort(key=lambda d: d["dst"])

    nfpm_yaml = "# Generated by Pantsbuild\n"
    nfpm_yaml += yaml.safe_dump(config)
    nfpm_yaml_content = FileContent("nfpm.yaml", nfpm_yaml.encode())

    digest = await Get(Digest, CreateDigest([nfpm_yaml_content]))
    return NfpmPackageConfig(digest)


def rules():
    return [*collect_rules()]
